#!/bin/bash

#projet lo14

#affichage en cas d'erreur de saisie
erreur_saisie()
{
    echo "mauvais argument(s) pour tacheron"
    echo "help pour plus d'information"
    exit 0
}
#affichage en cas d'erreur de fichier
erreur_fichier_inexistant()
{
    echo "le fichier $1 est inexistant"
    exit 0
}

# toutes les fonctions d'affichage pour le help
help_user()
{
    echo "user - specifie un utilisateur particulier"
    echo "--user [USER_NAME]"
    echo "-u [USER_NAME]"
}

help_affiche()
{
    echo "aff - affiche le fichier tacherontab"
    echo "--aff"
    echo "-l" 
}

help_remove()
{
    echo "rem - efface le fichier tacherontab"
    echo "--rem"
    echo "-r" 
}

help_edite()
{
    echo "edit - édite le fichier tacherontab dans vi"
    echo "--edit"
    echo "-e"
}

help_suppr()
{
    echo "dell - supprime tous les fichiers dans etc et var"
    echo "--dell"
    echo "-d"
}


help()
{
    echo "NAME"
    echo "Tacheron - planifier des taches"
    echo "SYNOPSIS"
    echo "tacheron [OPTION] [COMMANDE]"
    echo "DESCRIPTION"
    help_user()
    help_affiche()
    help_remove()
    help_edite()
    help_edite()
    echo "Planifier une tache"
    echo "[SECONDE][MINUTE][HEURES][JOUR DU MOIS][MOIS DE L'ANNEE][JOUR DE LA SEMAINE][COMMANDE]"
}

verif_permissionUser()
{
    
}

# verifier si le tacheron tab existe
verifier_tacherontab()
{
    if [ -d $1 ]
    then
        return true
    else
        return false
    fi
}

# fonction de de verification pour le chanps des secondes
verif_seconde()
{
    # Une valeur précise
    if [[ $1 = ^[0-3]$ ]]
    then
        return true
    #Une liste de valeurs valides, séparées par des virgules
    elif [[ $1 = ^([0-3](,[0-3])+)$ ]]
    then
        return true
    # Un intervalle avec les ~pris en compte
    elif [[ $1 = ^([0-3]-[0-3](~[0-3])*)$ ]]
    then
        return true
    # toutes les valeurs du champs
    elif [ $1 = 'README.md' ]
    then
        return true
    # division d'un intervalle par un nombre precis
    elif [[ $1 = ^([0-3]-[0-3](~[0-3])*/[0-3])$ ]]
    then
        return true
    # division de toutes les valeurs du champs par un nombre
    elif [[ $1 = ^(*/[0-3])$ ]]
    then
        return true
    else
        return false
    fi
}

# fonction de de verification pour le chanps des minutes
verif_minute()
{
    # Une valeur précise
    if [[ $1 = ^[0-59]$ ]]
    then
        return true
    #Une liste de valeurs valides, séparées par des virgules
    elif [[ $1 = ^([0-59](,[0-59])+)$ ]]
    then
        return true
    # Un intervalle avec les ~pris en compte
    elif [[ $1 = ^([0-59]-[0-59](~[0-59])*)$ ]]
    then
        return true
    # toutes les valeurs du champs
    elif [ $1 = 'README.md' ]
    then
        return true
    # division d'un intervalle par un nombre precis
    elif [[ $1 = ^([0-59]-[0-59](~[0-59])*/[0-59])$ ]]
    then
        return true
    # division de toutes les valeurs du champs par un nombre
    elif [[ $1 = ^(*/[0-59])$ ]]
    then
        return true
    else
        return false
    fi
}

# fonction de de verification pour le chanps des heures
verif_heure()
{
    # Une valeur précise
    if [[ $1 = ^[0-23]$ ]]
    then
        return true
    #Une liste de valeurs valides, séparées par des virgules
    elif [[ $1 = ^([0-23](,[0-23])+)$ ]]
    then
        return true
    # Un intervalle avec les ~pris en compte
    elif [[ $1 = ^([0-23]-[0-23](~[0-23])*)$ ]]
    then
        return true
    # toutes les valeurs du champs
    elif [ $1 = 'README.md' ]
    then
        return true
    # division d'un intervalle par un nombre precis
    elif [[ $1 = ^([0-23]-[0-23](~[0-23])*/[0-23])$ ]]
    then
        return true
    # division de toutes les valeurs du champs par un nombre
    elif [[ $1 = ^(*/[0-23])$ ]]
    then
        return true
    else
        return false
    fi 
}

# fonction de de verification pour le chanps des jours du mois
verif_jourDuMois()
{
    # Une valeur précise
   if [[ $1 = ^[1-31]$ ]]
    then
        return true
    #Une liste de valeurs valides, séparées par des virgules
    elif [[ $1 = ^([1-31](,[1-31])+)$ ]]
    then
        return true
    # Un intervalle avec les ~pris en compte
    elif [[ $1 = ^([1-31]-[1-31](~[1-31])*)$ ]]
    then
        return true
    # toutes les valeurs du champs
    elif [ $1 = 'README.md' ]
    then
        return true
    # division d'un intervalle par un nombre precis
    elif [[ $1 = ^([1-31]-[1-31](~[1-31])*/[1-31])$ ]]
    then
        return true
    # division de toutes les valeurs du champs par un nombre
    elif [[ $1 = ^(*/[1-31])$ ]]
    then
        return true
    else
        return false
    fi 
}

# fonction de de verification pour le chanps des mois de l'annee
verif_moisDeAnnee()
{
    # Une valeur précise
   if [[ $1 = ^[1-12]$ ]]
    then
        return true
    #Une liste de valeurs valides, séparées par des virgules
    elif [[ $1 = ^([1-12](,[1-12])+)$ ]]
    then
        return true
    # Un intervalle avec les ~pris en compte
    elif [[ $1 = ^([12-12]-[1-12](~[1-12])*)$ ]]
    then
        return true
    # toutes les valeurs du champs
    elif [ $1 = 'README.md' ]
    then
        return true
    # division d'un intervalle par un nombre precis
    elif [[ $1 = ^([1-12]-[1-12](~[1-12])*/[1-12])$ ]]
    then
        return true
    # division de toutes les valeurs du champs par un nombre
    elif [[ $1 = ^(*/[1-12])$ ]]
    then
        return true
    else
        return false
    fi 
}

# fonction de de verification pour le chanps des jours de la semaine
verif_jourDeSemaine()
{
    # Une valeur précise
   if [[ $1 = ^[0-6]$ ]]
    then
        return true
    #Une liste de valeurs valides, séparées par des virgules
    elif [[ $1 = ^([0-6](,[0-6])+)$ ]]
    then
        return true
    # Un intervalle avec les ~pris en compte
    elif [[ $1 = ^([0-6]-[0-6](~[0-6])*)$ ]]
    then
        return true
    # toutes les valeurs du champs
    elif [ $1 = 'README.md' ]
    then
        return true
    # division d'un intervalle par un nombre precis
    elif [[ $1 = ^([0-6]-[0-6](~[0-6])*/[0-6])$ ]]
    then
        return true
    # division de toutes les valeurs du champs par un nombre
    elif [[ $1 = ^(*/[0-6])$ ]]
    then
        return true
    else
        return false
    fi 
}

transformation_argument()
{
    #on met tous les files et rep du dossier courant dans un fichier temp et on compte le nombre d'occurence
    for i in `echo * | tr " " " "`
    do 
        echo $i >> temp
    done
    compteurls=$(cat temp | wc -l)
    #compteur utilise pour savoir si il faut ajouter a temp2 ou pas
    let "compteur = 0"
    let "compteurUser = 0"
    for i in "$@"
    do
        if [ $i = "-u" ] ||[ $i = "--user" ]
        then
            let "compteurUser = compteurUser + 1"
        else
            if [ $compteurUser -ne 1 ]
            then
                echo "0" > estDedans
                while read ligne
                do
                    if [ $ligne = $i ]
                    then
                        
                        echo "1" > estDedans
                        let "compteur = compteur + 1"
                        echo "$1" >> temp3
                        break
                    fi
                done < temp

                result=$(head -n 1 estDedans)
                if [ $result -eq 0 ]
                then
                    if [ $compteur -gt 0 ] && [ $compteur -lt $compteurls ]
                    then
                        cat temp3 | while read ligne
                                    do
                                        echo "$ligne" >> temp2
                                    done
                        
                        let "compteur = 0"
                        rm temp3
                    fi
                    echo "$i" >> temp2
                fi

                if [ $compteur -eq $compteurls ]
                then
                    echo "*" >> temp2
                    let "compteur = 0"
                    rm temp3
                fi
            else
                let "compteurUser = 0"
            fi
        fi
    done
    cat temp2

    let "compteur = 1"
    result=$(whoami)
    while read ligne
    do
        if [ $compteur -eq 7 ]
        then
            result="$result \"$ligne"
        else
            result="$result $ligne"
        fi
        let "compteur = compteur + 1"
    done < temp2
    result="$result\""
    echo "$result"
    rm temp2
    rm temp
    rm estDedans
    echo "$result"
}

#seul le root peut initialiser la commmande
#vérifier que les répertoire existe
#si oui alors fin de l'initialisation
#sinon 
#création au bon endroit
#donner tous les droits au root et adapter les droits pour les autres utilisateurs
initialisation()
{
    if [ "$UID" -ne "0" ]
    then
        echo "L'initialisation de la commande doit être effectuée par le root"
        exit 1
    else
        if [ ! -d /etc/tacheron ]; #verification si le répertoire existe
        then 
            mkdir /etc/tacheron;
            chmod u+rwx,g+r-wx,o+r-wx /etc/tacheron;
            echo "répertoire tacheron créé";
        else
            echo "répertoire tacheron déjà créé";
            exit 0
        fi

        if [ ! -f /etc/tacherontab ]; #vérification si le fichier existe
        then
            touch /etc/tacherontab;
            echo "fichier tacherontab créé";
            chmod u+rwx,g-rwx,o-rwx /etc/tacherontab; #on doit autoriser que le root et les users de tacheron.allow à lire et écrire 
        else
            echo "fichier tacherontab déjà créé";
            exit 0
        fi

        if [ ! -f /etc/tacheron.allow ];
        then    
            touch /etc/tacheron.allow;
            echo "fichier user autorisé créé";
            chmod u+rwx,g-rwx,o-rwx /etc/tacheron.allow;
        else
            echo "fichier tacheron.allow déjà créé";
            exit 0
        fi

        if [ ! -f /etc/tacheron.deny ];
        then
            touch /etc/tacheron.deny;
            echo "fichier user non autorisé créé";
            chmod u+rwx,g-rwx,o-rwx /etc/tacheron.deny;
        else
            echo "fichier user non autorisé déjà créé";
            exit 0
        fi

        if [ ! -f /var/log/tacheron ];
        then
            touch /var/log/tacheron;
            echo "fichier historique créé"
        else
            echo "fichier historique déjà créé";
            exit 0
        fi
    fi
}

suppression()
{
    #permet de faire nos tests et de supprimer l'arborescence en cas de problème
    if [ "$UID" -ne "0" ]
    then
        echo "Vous n'êtes pas identifier en tant que root, suppression impossible"
    else    
        confirm()
        {
            read -r -p "${1} [y/N] " response

            case "$response" in 
                [yY][eE][sS]|[yY])
                    true;;
                *)
                    false;;
            esac
        }

        echo "ATTENTION, vous allez supprimer l'arborescence du projet"
        if confirm "Supprimer ? yes or no";
        then
            rm -r /etc/tacheron;
            rm /etc/tacherontab;
            rm /etc/tacheron.allow;
            rm /etc/tacheron.deny;
            rm /var/log/tacheron;
            echo "Suppression de l'arborescence effectuée"
        else    
            echo "Vous avez annulé la suppression";
        fi
    fi
}

if [ $# -eq 1 ]
then 
    if [ $1 = "help" ]
    then
        help 
    elif [ $1 = "-l" ] || [ $1 = "--aff" ]
    then
        if verifier_tacherontab "/etc/tacherontab"
        then
            cat  /etc/tacherontab
        else
            erreur_fichier_inexistant "/etc/tacherontab"
        fi
    elif [ $1 = "-r" ] || [ $1 = "--rem" ]
    then
        if verifier_tacherontab "/etc/tacherontab"
        then
            rm  /etc/tacherontab
        else
            erreur_fichier_inexistant "/etc/tacherontab"
        fi
    elif [ $1 = "-e"  ] || [ $1 = "--edit" ]
    then
        if verifier_tacherontab "/etc/tacherontab"
        then
            vi  /etc/tacherontab
        else
            erreur_fichier_inexistant "/etc/tacherontab"
        fi
    elif [ $1 = "-d"  ] || [ $1 = "--dell" ]
    then
        suppression
    else
        erreur_saisie
    fi  
elif [ $# -eq 2 ]
then
    if [ $1 = "help" ]
    then
        if [ $2 = "-l" ] || [ $2 = "--aff" ]
        then
            help_affiche
        elif [ $2 = "-e" ] || [ $2 = "--edit" ]
        then 
            help_edite
        elif [ $2 = "-r" ] || [ $2 = "--rem" ]
            help_remove
        elif [ $2 = "-d" ] || [ $2 = "--dell" ]
        then 
            help_suppr
        else
            erreur_saisie
        fi
    else
       erreur_saisie
    fi
elif [ $# -eq 3 ]
then
    if [ $1 = "--user" ] || [ $1 = "-u" ]
    then
        cat /etc/passwd | cut -d ":" -f 1 > temp
        userTemp = grep -c ^$2$ temp
        rm temp

        if [ $userTemp -eq 1 ]
        then 
            if [ $1 = "-l" ] || [ $1 = "--aff" ]
            then
                if verifier_tacherontab "/etc/tacheron/tacherontab$2"
                then
                    cat  /etc/tacherontab
                else
                    erreur_fichier_inexistant "/etc/tacheron/tacherontab$2"
                fi
            elif [ $1 = "-r" ] || [ $1 = "--rem" ]
            then
                if verifier_tacherontab "/etc/tacheron/tacherontab$2"
                then
                    rm  /etc/tacherontab
                else
                    erreur_fichier_inexistant "/etc/tacheron/tacherontab$2"
                fi
            elif [ $1 = "-e"  ] || [ $1 = "--edit" ]
            then
                if verifier_tacherontab "/etc/tacheron/tacherontab$2"
                then
                    vi  /etc/tacherontab
                else
                    erreur_fichier_inexistant "/etc/tacheron/tacherontab$2"
                fi
            else
                erreur_saisie
            fi
        else
           erreur_saisie
        fi
    else
        erreur_saisie
    fi
elif [ $# -ge 7 ]
then
    if verif_seconde $1 || verif_minute $2 || verif_heure $3 || verif_jourDuMois $4 || verif_moisDeAnnee $5 || verif_jourDeSemaine $6
    then
        if [ $7 = '-u' ] || [ $7 = '--user' ]
        then
            cat /etc/passwd | cut -d ":" -f 1 > temp
            userTemp = grep -c ^$8$ temp
            rm temp

            if [ $userTemp -eq 1 ]
            then
                result=$(transformation_argument $@)
                result >> "/etc/tacheron/tacherontab$8"
            else
                echo "mauvais utilisateur"
                erreur_saisie
            fi
        else
            result=$(transformation_argument $@)
            result >> "/etc/tacherontab"
        fi
    else
        erreur_saisie
    fi 
else
   erreur_saisie
fi 


