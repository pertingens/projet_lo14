#!/bin/bash
#fichier pour la commande tacheron

#affichage en cas d'erreur de saisie
erreur_saisie()
{
    echo "mauvais argument(s) pour tacheron"
    echo "help pour plus d'information"
    exit 0
}
#affichage en cas d'erreur de fichier
erreur_fichier_inexistant()
{
    echo "le fichier $1 est inexistant"
    exit 0
}

erreur_permission()
{
    echo "Vous avez pas la permission d'editer ce fichier, veuillez contacter votre administrateur"
    exit 0
}
# toutes les fonctions d'affichage pour le help
help_user()
{
    echo "      user : specifie un utilisateur particulier"
    echo "      --user [USER_NAME]"
    echo -e "      -u [USER_NAME]\n"
}

help_affiche()
{
    echo "      aff : affiche le fichier tacherontab"
    echo "      --aff"
    echo -e "      -a\n" 
}

help_remove()
{
    echo "      rem : efface le fichier tacherontab"
    echo "      --rem"
    echo -e "      -r\n" 
}

help_edite()
{
    echo "      edit : édite le fichier tacherontab dans vi"
    echo "      --edit"
    echo -e "      -e\n"
}

help_suppr()
{
    echo "      dell : stoppe le service et supprime l'arborescence"
    echo "      --dell"
    echo -e "      -d\n"
}


help()
{
    echo -e "   --------COMMANDE TACHERON--------\n"
    echo -e "   NAME : Tacheron - Planificateur de taches\n"
    echo -e "   AUTHORS : BORNE AUGUSTIN & LETELLIER QUENTIN\n"
    echo -e "   SYNOPSIS : ./tacheron [OPTION] [COMMANDE]\n"
    echo -e "   DESCRIPTION : \n"
    help_user
    help_affiche
    help_remove
    help_edite
    help_suppr
    echo "  Planifier une tache"
    echo "  ./tacheron <SECONDE> <MINUTE> <HEURES> <JOUR DU MOIS> <MOIS DE L'ANNEE> <JOUR DE LA SEMAINE> [<-u> <user>] <commande>"
}

# verifier si le tacheron tab existe
verifier_tacherontab()
{
    if [ -e $1 ]
    then
        echo "true"
    else
        echo "false"
    fi
}

#verifier si l'utilisateur en argument existe
verif_user()
{
    cat /etc/passwd | cut -d ":" -f 1 > temp
    userTemp=$(grep -c ^$1$ temp)
    rm temp

    if [ $userTemp -eq 1 ]
    then
        echo "true"
    else
        echo "false"
    fi
}

transformation_argument()
{
    #on met tous les files et rep du dossier courant dans un fichier temp et on compte le nombre d'occurence
    for i in `echo * | tr " " " "`
    do 
        echo $i >> temp
    done
    compteurls=$(cat temp | wc -l)
    #compteur utilise pour savoir si il faut ajouter a temp2 ou pas
    let "compteur = 0"
    let "compteurUser = 0"
    for i in "$@"
    do
        if [ $i = "-u" ] ||[ $i = "--user" ]
        then
            let "compteurUser = compteurUser + 1"
        else
            if [ $compteurUser -ne 1 ]
            then
                echo "0" > estDedans
                while read ligne
                do
                    if [ $ligne = $i ]
                    then
                        
                        echo "1" > estDedans
                        let "compteur = compteur + 1"
                        echo "$1" >> temp3
                        break
                    fi
                done < temp

                result=$(head -n 1 estDedans)
                if [ $result -eq 0 ]
                then
                    if [ $compteur -gt 0 ] && [ $compteur -lt $compteurls ]
                    then
                        cat temp3 | while read ligne
                                    do
                                        echo "$ligne" >> temp2
                                    done
                        
                        let "compteur = 0"
                        rm temp3
                    fi
                    echo "$i" >> temp2
                fi

                if [ $compteur -eq $compteurls ]
                then
                    echo "*" >> temp2
                    let "compteur = 0"
                    rm temp3
                fi
            else
                let "compteurUser = 0"
            fi
        fi
    done
    #cat temp2

    let "compteur = 1"
    result=$(whoami)
    while read ligne
    do
        if [ $compteur -eq 7 ]
        then
            result="$result \"$ligne"
        else
            result="$result $ligne"
        fi
        let "compteur = compteur + 1"
    done < temp2
    result="$result\""
    #echo "$result"
    rm temp2
    rm temp
    rm estDedans
    echo "$result"
}

recuperation_user()
{
    let "user = 0"
    result=""
    for i in "$@"
    do
        if [ $user -eq 1 ]
        then
            result="$i"
            break
        fi

        if [ $i = "-u" ] || [ $i = "--user" ]
        then
            let "user = 1"
        fi     
    done
    echo $result
}

verif_createur()
{
    userTemp=$(grep -c ^$1$ /etc/tacheron.allow)
    if [ $userTemp -eq 1 ]
    then
        echo "true"
    else
        echo "false"
    fi
}

# fonction de de verification pour le chanps des secondes
verif_seconde()
{
    if [[ $1 =~ ^[0-3]$ ]]
    then
        echo "true"
    #Une liste de valeurs valides, séparées par des virgules
    elif [[ $1 =~ ^([0-3](,[0-3])+)$ ]]
    then
       echo "true"
    # Un intervalle avec les ~pris en compte
    elif [[ $1 =~ ^([0-3]-[0-3](~[0-3])*)$ ]]
    then
        echo "true"
    # toutes les valeurs du champs
    elif [ "$1" = "*" ]
    then
        echo "true"
    # division d'un intervalle par un nombre precis
    elif [[ $1 =~ ^([0-3]-[0-3](~[0-3])*/[0-3])$ ]]
    then
        echo "true"
    # division de toutes les valeurs du champs par un nombre
    elif [[ $1 =~ ^(\*/[0-3])$ ]]
    then
        echo "true"
    else
        echo "false"
    fi
}

verif_minute()
{

    if [[ $1 =~ ^([0-9]|[1-5][0-9])$ ]]
    then
        echo "true"
    #Une liste de valeurs valides, séparées par des virgules
    elif [[ $1 =~ ^(0[0-9]|1[0-9]|2[0-3])(,(0[0-9]|[1-5][0-9]))+$ ]]
    then
       echo "true"
    # Un intervalle avec les ~pris en compte
    elif [[ $1 =~ ^(0[0-9]|[1-5][0-9])-(0[0-9]|[1-5][0-9])(~(0[0-9]|[1-5][0-9]))*$ ]]
    then
        echo "true"
    # toutes les valeurs du champs
    elif [ "$1" = "*" ]
    then
        echo "true"
    # division d'un intervalle par un nombre precis
    elif [[ $1 =~ ^(0[0-9]|[1-5][0-9])-(0[0-9]|[1-5][0-9])(~([0-9]|[1-5][0-9]))*/([0-9]|[1-5][0-9])$ ]]
    then
        echo "true"
    # division de toutes les valeurs du champs par un nombre
    elif [[ $1 =~ ^(\*/([0-9]|[1-5][0-9]))$ ]]
    then
        echo "true"
    else
        echo "false"
    fi
}

verif_heure()
{

    if [[ $1 =~ ^([0-9]|1[0-9]|2[0-3])$ ]]
    then
        echo "true"
    #Une liste de valeurs valides, séparées par des virgules
    elif [[ $1 =~ ^(0[0-9]|1[0-9]|2[0-3])(,(0[0-9]|1[0-9]|2[0-3]))+$ ]]
    then
       echo "true"
    # Un intervalle avec les ~pris en compte
    elif [[ $1 =~ ^(0[0-9]|1[0-9]|2[0-3])-(0[0-9]|1[0-9]|2[0-3])(~(0[0-9]|1[0-9]|2[0-3]))*$ ]]
    then
        echo "true"
    # toutes les valeurs du champs
    elif [ "$1" = "*" ]
    then
        echo "true"
    # division d'un intervalle par un nombre precis
    elif [[ $1 =~ ^(0[0-9]|1[0-9]|2[0-3])-(0[0-9]|1[0-9]|2[0-3])(~([0-9]|1[0-9]|2[0-3]))*/([0-9]|1[0-9]|2[0-3])$ ]]
    then
        echo "true"
    # division de toutes les valeurs du champs par un nombre
    elif [[ $1 =~ ^(\*/([0-9]|1[0-9]|2[0-3]))$ ]]
    then
        echo "true"
    else
        echo "false"
    fi
}

verif_jourDuMois()
{

    if [[ $1 =~ ^(0[0-9]|[1-2][0-9]|3[0-1])$ ]]
    then
        echo "true"
    #Une liste de valeurs valides, séparées par des virgules
    elif [[ $1 =~ ^(0[0-9]|[1-2][0-9]|3[0-1])(,(0[0-9]|[1-2][0-9]|3[0-1]))+$ ]]
    then
       echo "true"
    # Un intervalle avec les ~pris en compte
    elif [[ $1 =~ ^(0[0-9]|[1-2][0-9]|3[0-1])-(0[0-9]|[1-2][0-9]|3[0-1])(~(0[0-9]|[1-2][0-9]|3[0-1]))*$ ]]
    then
        echo "true"
    # toutes les valeurs du champs
    elif [ "$1" = "*" ]
    then
        echo "true"
    # division d'un intervalle par un nombre precis
    elif [[ $1 =~ ^(0[0-9]|[1-2][0-9]|3[0-1])-(0[0-9]|[1-2][0-9]|3[0-1])(~([0-9]|[1-2][0-9]|3[0-1]))*/([0-9]|[1-2][0-9]|3[0-1])$ ]]
    then
        echo "true"
    # division de toutes les valeurs du champs par un nombre
    elif [[ $1 =~ ^(\*/([0-9]|[1-2][0-9]|3[0-1]))$ ]]
    then
        echo "true"
    else
        echo "false"
    fi
}

verif_moisDeAnnee()
{

    if [[ $1 =~ ^(0[0-9]|1[0-2])$ ]]
    then
        echo "true"
    #Une liste de valeurs valides, séparées par des virgules
    elif [[ $1 =~ ^(0[0-9]|1[0-2])(,(0[0-9]|1[0-2]))+$ ]]
    then
       echo "true"
    # Un intervalle avec les ~pris en compte
    elif [[ $1 =~ ^(0[0-9]|1[0-2])-(0[0-9]|1[0-2])(~(0[0-9]|1[0-2]))*$ ]]
    then
        echo "true"
    # toutes les valeurs du champs
    elif [ "$1" = "*" ]
    then
        echo "true"
    # division d'un intervalle par un nombre precis
    elif [[ $1 =~ ^(0[0-9]|1[0-2])-(0[0-9]|1[0-2])(~([0-9]|1[0-2]))*/([0-9]|1[0-2])$ ]]
    then
        echo "true"
    # division de toutes les valeurs du champs par un nombre
    elif [[ $1 =~ ^(\*/([0-9]|1[0-2]))$ ]]
    then
        echo "true"
    else
        echo "false"
    fi
}

verif_jourSemaine()
{
    if [[ $1 =~ ^[0-6]$ ]]
    then
        echo "true"
    #Une liste de valeurs valides, séparées par des virgules
    elif [[ $1 =~ ^([0-6](,[0-6])+)$ ]]
    then
       echo "true"
    # Un intervalle avec les ~pris en compte
    elif [[ $1 =~ ^([0-6]-[0-6](~[0-6])*)$ ]]
    then
        echo "true"
    # toutes les valeurs du champs
    elif [ "$1" = "*" ]
    then
        echo "true"
    # division d'un intervalle par un nombre precis
    elif [[ $1 =~ ^([0-6]-[0-6](~[0-6])*/[0-6])$ ]]
    then
        echo "true"
    # division de toutes les valeurs du champs par un nombre
    elif [[ $1 =~ ^(\*/[0-6])$ ]]
    then
        echo "true"
    else
        echo "false"
    fi
}

verif_argument()
{
    echo "$1" > tempargument
    verif_argument_result="true"
    reste=$(cut -d"\"" -f1 tempargument)
    createur=$(cut -d" " -f1 tempargument)
    seconde=$(cut -d" " -f2 tempargument)
    minutes=$(cut -d" " -f3 tempargument)
    heures=$(cut -d" " -f4 tempargument)
    jourDuMois=$(cut -d" " -f5 tempargument)
    moisDeAnnee=$(cut -d" " -f6 tempargument)
    jourSemaine=$(cut -d" " -f7 tempargument)
    if [ $(cut -d" " -f8 tempargument) = "-u" ] || [ $(cut -d" " -f8 tempargument) = "--user" ]
    then
        user=$(cut -d" " -f9 tempargument)
        commande=$(cut -d" " -f10- tempargument)
    else
        user=""
        commande=$(cut -d" " -f8- tempargument)
    fi
    rm tempargument
    test=$(echo "$1" | wc -w)
    if [ $(($test))  -lt 8 ]
    then 
        verif_argument_result="false"
    fi

    if [ $(verif_createur "$createur") = "false" ]
    then
        #echo "Vous n'avez pas l'autorisation de créer des commandes, veuillez concater votre administrateur"
        verif_argument_result="false"
    fi

    if [ "$(verif_seconde "$seconde")" = "false" ]
    then
       #echo "le Champs temporel des secondes \"$seconde\" n'est pas conforme"
       verif_argument_result="false"
    fi

    if [ "$(verif_minute "$minutes")" = "false" ]
    then
       #echo "le Champs temporel des minutes \"$minutes\" n'est pas conforme"
       verif_argument_result="false"
    fi

    if [ "$(verif_heure "$heures")" = "false" ]
    then
        #echo "le Champs temporel des heures \"$heures\" n'est pas conforme"
        verif_argument_result="false"
    fi

    if [ "$(verif_jourDuMois "$jourDuMois")" = "false" ]
    then
        #echo "le Champs temporel des jours du mois \"$jourDuMois\" n'est pas conforme"
        verif_argument_result="false"
    fi

    if [ "$(verif_moisDeAnnee "$moisDeAnnee")" = "false" ]
    then
        #echo "le Champs temporel des mois de l'année \"$moisDeAnnee\" n'est pas conforme"
        verif_argument_result="false"
    fi

    if [ "$(verif_jourSemaine "$jourSemaine")" = "false" ]
    then
        #echo "le Champs temporel des jours de la semaine \"$jourSemaine\" n'est pas conforme"
        verif_argument_result="false"
    fi

    if [ "$user" != "" ]
    then
        if [ "$(verif_user "$user")" = "false" ]
        then
            #echo "Erreur : l'utilisateur \"$user\" n'exite pas sur cette machine"
            verif_argument_result="false"
        fi
    fi

    echo "$verif_argument_result"

       
}

initialisation()
{
    if [ "$UID" -eq "0" ] || ( grep "$(whoami)" "/etc/tacheron.allow" ) >/dev/null 2>&1;
    then
            if [ ! -d /etc/tacheron ]; #verification si le répertoire existe
            then 
                mkdir /etc/tacheron;
                chmod 777 /etc/tacheron;
            fi

            if [ ! -f /etc/tacherontab ]; #vérification si le fichier pour le root existe
            then
                touch /etc/tacherontab;
                chmod 777 /etc/tacherontab; #on doit autoriser que le root à écrire 
            fi

            if [ ! -f /etc/tacheron/tacherontab$(whoami) ]; #vérification si le fichier user connecté existe
            then
                touch /etc/tacheron/tacherontab$(whoami);
                chmod 777 /etc/tacheron/tacherontab$(whoami);
            fi

            if [ ! -f /etc/tacheron.allow ];
            then    
                touch /etc/tacheron.allow;
                chmod 744 /etc/tacheron.allow;
                echo "root" > /etc/tacheron.allow
            fi

            if [ ! -f /etc/tacheron.deny ];
            then
                touch /etc/tacheron.deny;
                chmod 744 /etc/tacheron.deny;
            fi

            if [ ! -f /var/log/tacheron ];
            then
                sudo chmod 777 /var/log;
                sudo touch /var/log/tacheron;
                chmod 777 /var/log/tacheron;
                echo "-----------------------------------------------" > /var/log/tacheron
                echo "      HISTORIQUE DE LA COMMANDE TACHERON       " >> /var/log/tacheron
                echo "-----------------------------------------------" >> /var/log/tacheron
            fi
    else
            echo "La commande doit être effectuée par le root ou un utilisateur autorisé"
            exit 1
    fi
    chmod +x ./init_daemon;
    ./init_daemon

}

suppression()
{
    #permet de faire nos tests et de supprimer l'arborescence en cas de problème
    if [ "$UID" -ne "0" ]
    then
        echo "Vous n'êtes pas identifier en tant que root, suppression impossible"
    else    
        confirm()
        {
            read -r -p "${1} [y/N] " response

            case "$response" in 
                [yY][eE][sS]|[yY])
                    true;;
                *)
                    false;;
            esac
        }

        echo "ATTENTION, vous allez supprimer l'arborescence du projet"
        if confirm "Supprimer ? yes or no";
        then
            sudo /etc/init.d/daemon_tacheron.sh stop;
            sudo update-rc.d -f daemon_tacheron.sh remove;
            sudo rm /etc/init.d/daemon_tacheron.sh;
            sudo rm /usr/sbin/daemon_tacheron.sh;
            rm -r /etc/tacheron;
            rm /etc/tacherontab;
            rm /etc/tacheron.allow;
            rm /etc/tacheron.deny;
            rm /var/log/tacheron;
            rm ./fichierInitialisation
            echo "Suppression de l'arborescence effectuée"
        else    
            echo "Vous avez annulé la suppression";
        fi
    fi
}

edite_fichier()
{
    cat $1 > temp
    vi temp 
    #cat temp
    let "compteur = 1"
    cat temp | while read ligne
    do
        test=$(verif_argument "$ligne")
        if [  "$test" = "false" ]
        then
            echo "la ligne $compteur n'est pas conforme : \"$ligne\""
        else
            echo "$ligne">>temp2
        fi
        let "compteur = $compteur + 1"
    done
    
    cat temp2 > $1
    rm temp
    rm temp2
}

if [ ! -e fichierInitialisation ]
then
    touch fichierInitialisation
    chmod 777 fichierInitialisation

    if [ $# -eq 1 ]
    then
        if [ $1 = "-i" ] || [ $1 = "--init" ]
        then
            initialisation
            echo "1">fichierInitialisation
        else
            echo "veuillez initialiser tacheron"
            exit 0
        fi
    else
        echo "veuillez initialiser tacheron"
        exit 0
    fi
elif [ "$(cat fichierInitialisation)" = "1" ]
then
    if [ $# -eq 1 ]
    then 
        if [ $1 = "help" ]
        then
            help 
        elif [ $1 = "-a" ] || [ $1 = "--aff" ]
        then
            if [ $(verifier_tacherontab "/etc/tacherontab") = "true" ]
            then
                cat  /etc/tacherontab
            else
                erreur_fichier_inexistant "/etc/tacherontab"
            fi
        elif [ $1 = "-r" ] || [ $1 = "--rem" ]
        then
            if [ $(verifier_tacherontab "/etc/tacherontab") = "true" ]
            then
                rm  /etc/tacherontab
            else
                erreur_fichier_inexistant "/etc/tacherontab"
            fi
        elif [ $1 = "-l"  ] || [ $1 = "--log" ]
        then
            cat "/var/log/tacheron"
        elif [ $1 = "-e"  ] || [ $1 = "--edit" ]
        then
            if [ $(verif_createur $(whoami)) = "true" ]
            then
                if [ $(verifier_tacherontab "/etc/tacherontab") = "true" ]
                then
                    edite_fichier /etc/tacherontab
                else
                    echo "le fichier \"/etc/tacherontab\" n'existe pas encore, nous allons le créer"
                    touch "/etc/tacherontab"
                    chmod 777 "/etc/tacherontab"
                    edite_fichier "/etc/tacherontab"
                fi
            else
                erreur_permission
            fi
        elif [ $1 = "-d"  ] || [ $1 = "--dell" ]
        then
            suppression
        else
            erreur_saisie
        fi  
    elif [ $# -eq 2 ]
    then
        if [ $1 = "help" ]
        then
            if [ $2 = "-a" ] || [ $2 = "--aff" ]
            then
                help_affiche
            elif [ $2 = "-e" ] || [ $2 = "--edit" ]
            then 
                help_edite
            elif [ $2 = "-r" ] || [ $2 = "--rem" ]
            then
                help_remove
            elif [ $2 = "-d" ] || [ $2 = "--dell" ]
            then 
                help_suppr
            else
                erreur_saisie
            fi
        else
        erreur_saisie
        fi
    elif [ $# -eq 3 ]
    then
        if [ $1 = "--user" ] || [ $1 = "-u" ]
        then      
            if [ $(verif_user "$2") = "true" ]
            then 
                if [ $3 = "-a" ] || [ $3 = "--aff" ]
                then
                    if [ $(verifier_tacherontab "/etc/tacheron/tacherontab$2") = "true" ]
                    then
                        cat  "/etc/tacheron/tacherontab$2"
                    else
                        erreur_fichier_inexistant "/etc/tacheron/tacherontab$2"
                    fi
                elif [ $3 = "-r" ] || [ $3 = "--rem" ]
                then
                    if [ $(verifier_tacherontab "/etc/tacheron/tacherontab$2") = "true" ]
                    then
                        rm  "/etc/tacheron/tacherontab$2"
                    else
                        erreur_fichier_inexistant "/etc/tacheron/tacherontab$2"
                    fi
                elif [ $3 = "-e"  ] || [ $3 = "--edit" ]
                then
                    if [ $(verif_createur $(whoami)) = "true" ]
                    then
                        if [ $(verifier_tacherontab "/etc/tacheron/tacherontab$2") = "true" ]
                        then
                            edite_fichier "/etc/tacheron/tacherontab$2"
                        else
                            echo "le fichier \"/etc/tacheron/tacherontab$2\" n'existe pas encore, nous allons le créer"
                            touch "/etc/tacheron/tacherontab$2"
                            chmod 777 "/etc/tacheron/tacherontab$2"
                            edite_fichier "/etc/tacheron/tacherontab$2"
                        fi
                    else
                        erreur_permission
                    fi
                else
                    erreur_saisie
                fi
            else
            erreur_saisie
            fi
        else
            erreur_saisie
        fi
    elif [ $# -ge 7 ]
    then
        if [ $(verif_createur $(whoami)) = "true" ]
        then
            result=$(transformation_argument $@)
            #echo "$result"
            if [ $(verif_argument "$result") = "true" ]
            then
                if [ "$(recuperation_user $@)" != "" ]
                then
                    user=$(recuperation_user $@)
                    echo "$result" >> "/etc/tacheron/tacherontab$user"
                else
                    echo "$result" >> "/etc/tacherontab"
                fi
            else
                erreur_saisie
            fi
        else
            erreur_permission
        fi
    else
    erreur_saisie
    fi 
else
    if [ $# -eq 1 ]
    then
        if [ $1 = "-i" ] || [ $1 = "--init" ]
        then
            initialisation
            echo "1" > fichierInitialisation
        else
            echo "veuillez initialiser tacheron"
            exit 0
        fi
    else
        echo "veuillez initialiser tacheron"
        exit 0
    fi
fi


